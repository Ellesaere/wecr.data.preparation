)
# Install packages that are not yet installed
install.packages(setdiff(packages, rownames(installed.packages())))
# Load the necessary libraries quietly and without warnings
lapply(packages, function(pkg) {
if (!require(pkg, character.only = TRUE, quietly = TRUE)) {
library(pkg, character.only = TRUE, quietly = TRUE)
}
})
devtools::install_github("your-username/wecr.data.preparation", force=TRUE)
# Set options and save old warning option
options(scipen = 999)
# oldw <- getOption("warn")
# options(warn = -1)
# Specify the packages of interest
packages <- c(
"devtools",
"data.table",
"haven"
)
# Install packages that are not yet installed
install.packages(setdiff(packages, rownames(installed.packages())))
# Load the necessary libraries quietly and without warnings
lapply(packages, function(pkg) {
if (!require(pkg, character.only = TRUE, quietly = TRUE)) {
library(pkg, character.only = TRUE, quietly = TRUE)
}
})
devtools::install_github("Ellesaere/wecr.data.preparation", force=TRUE)
library(wecr.data.preparation)
wecr.data.preparation::column_info()
# Set options and save old warning option
options(scipen = 999)
# oldw <- getOption("warn")
# options(warn = -1)
# Specify the packages of interest
packages <- c(
"devtools",
"data.table",
"haven"
)
# Install packages that are not yet installed
install.packages(setdiff(packages, rownames(installed.packages())))
# Load the necessary libraries quietly and without warnings
lapply(packages, function(pkg) {
if (!require(pkg, character.only = TRUE, quietly = TRUE)) {
library(pkg, character.only = TRUE, quietly = TRUE)
}
})
devtools::install_github("Ellesaere/wecr.data.preparation", force=TRUE)
library(wecr.data.preparation)
# Reset warning option
options(warn = oldw)
# Set options and save old warning option
options(scipen = 999)
oldw <- getOption("warn")
options(warn = -1)
# Specify the packages of interest
packages <- c(
"devtools",
"data.table",
"haven"
)
# Install packages that are not yet installed
install.packages(setdiff(packages, rownames(installed.packages())))
# Load the necessary libraries quietly and without warnings
lapply(packages, function(pkg) {
if (!require(pkg, character.only = TRUE, quietly = TRUE)) {
library(pkg, character.only = TRUE, quietly = TRUE)
}
})
devtools::install_github("Ellesaere/wecr.data.preparation", force=TRUE)
library(wecr.data.preparation)
# Reset warning option
options(warn = oldw)
# Obtain version of R
r_version <- getRversion()
# Obtain versions of installed packages
pkg_versions <- sapply(packages, function(x) packageVersion(x))
# # Generate remotes::install_version() commands for each package
install_commands <- paste0("remotes::install_version('", names(pkg_versions), "', version = '", pkg_versions, "')")
saveRDS(install_commands, "install_commands.rds")
install_commands <- readRDS("install_commands.rds")
# Save R version and package versions to a text file
writeLines(c(sprintf("# R version: %s", r_version), install_commands), "package_versions_and_install_commands.txt")
#####################################################################################################################
# Step 1: List all .dta files
files <- list.files(path = "C:/Users/tomki/OneDrive/Coding/Scripts/R_scripts/DNB Household Survey/Data",
pattern = "\\.dta$", full.names = TRUE)
# Step 2: Load all files as data.tables and add year column
data_list <- lapply(files, function(file) {
# Extract year from filename
year <- sub(".*?(\\d{4}).*","\\1", basename(file))
# Read the .dta file and convert to data.table
dt <- read_dta(file)
setDT(dt)
# Add the year as a new column
dt[, year := as.numeric(year)]
return(dt)
})
# Step 3: Find common columns
common_cols <- Reduce(intersect, lapply(data_list, names))
# Identify duplicate columns and append postfix for each data table
data_list <- lapply(seq_along(data_list), function(i) {
dt <- data_list[[i]]
file <- files[i]
# Extract prefix from file name
prefix <- substr(basename(file), 1, 3)
# Rename non-common columns
non_common_cols <- setdiff(names(dt), common_cols)
new_names <- paste0(non_common_cols, "_", prefix)
names(dt)[names(dt) %in% non_common_cols] <- new_names
return(dt)
})
# Check if there are any common columns
if (length(common_cols) == 0) {
stop("No common columns found.")
}
# Step 4: Merge all data.tables by common columns
# Initialize the merged data table with the first data table in the list
dhs_data <- data_list[[1]]
# Merge the rest of the data tables
for (i in 2:length(data_list)) {
dhs_data <- merge(dhs_data, data_list[[i]], by = common_cols, all = TRUE)
print(paste0("merged nr ", i, " of ", length(data_list) ))
}
# column_info <- function(dt, corr_variable = NULL) {
#   # Convert to data.table if not already one
#   if (!inherits(dt, "data.table")) {
#     dt <- as.data.table(dt)
#   }
#   # Initialize a list to store column info
#   info_list <- list()
#   # Check if corr_variable is provided and exists in the data.table
#   corr_exists <- !is.null(corr_variable) && corr_variable %in% names(dt) &&
#                  any(class(dt[[corr_variable]]) %in% c("numeric", "integer", "double", "logical"))
#   corr_key <- if (!is.null(corr_variable)) {
#     paste("CorrelationWith", corr_variable, sep = "_")
#   } else {
#     "CorrelationWith" # Fallback if corr_variable is NULL
#   }
#   # Iterate over each column
#   for (col_name in names(dt)) {
#     col_data <- dt[[col_name]]
#     col_classes <- class(col_data)
#     col_label <- if (!is.null(attributes(col_data)$label)) {
#       attributes(col_data)$label
#     } else {
#       NA # NA if no label exists
#     }
#     is_numeric_or_logical <- any(col_classes %in% c("numeric", "integer", "double", "logical"))
#     col_mean <- if (is_numeric_or_logical) {
#       round(mean(col_data, na.rm = TRUE),2)
#     } else {
#       NA # NA for non-numeric and non-logical columns
#     }
#     col_var <- if (is_numeric_or_logical) {
#       round(sd(col_data, na.rm = TRUE),2)
#     } else {
#       NA # NA for non-numeric and non-logical columns
#     }
#     col_nobs <- length(na.omit(col_data))
#     col_corr <- NA
#     if (corr_exists && is_numeric_or_logical && col_name != corr_variable) {
#       col_corr <- tryCatch({
#         round(cor(dt[[col_name]], dt[[corr_variable]], use = "complete.obs"), 2)
#       }, error = function(e) { NA }) # Set correlation to NA if error occurs
#     }
#     variable_type <- if (is_numeric_or_logical) {
#       if (all(col_data >= 0, na.rm = TRUE)) {
#         if (all(col_data == floor(col_data), na.rm = TRUE)) {
#           "discrete_non_neg"
#         } else {
#           "continuous_non_neg"
#         }
#       } else {
#         if (all(col_data == floor(col_data), na.rm = TRUE)) {
#           "discrete"
#         } else {
#           "continuous"
#         }
#       }
#     } else {
#       "not_numeric_or_logical"
#     }
#     dist_type <- NA
#     if (is_numeric_or_logical && !is.na(col_var) && !is.na(col_mean)) {
#       if (col_var > col_mean) {
#         dist_type <- "Possibly Overdispersed"
#       } else {
#         dist_type <- "Possibly Poisson or Normal"
#       }
#     }
#     col_max <- if (is_numeric_or_logical && any(!is.na(col_data))) {
#       round(max(col_data, na.rm = TRUE),2)
#     } else {
#       NA # Return NA if column has only NAs or is not numeric/logical
#     }
#     col_min <- if (is_numeric_or_logical && any(!is.na(col_data))) {
#       round(min(col_data, na.rm = TRUE),2)
#     } else {
#       NA # Return NA if column has only NAs or is not numeric/logical
#     }
#     # Create the list entry for this column
#     column_info_list <- list(
#       Label = as.character(col_label),
#       Mean = as.numeric(col_mean),
#       StandardDev = as.numeric(col_var),
#       Max = as.numeric(col_max),
#       Min = as.numeric(col_min),
#       Observations = as.integer(col_nobs),
#       VariableType = as.character(variable_type),
#       DistributionType = as.character(dist_type),
#       Class = as.character(paste(col_classes, collapse = ", "))
#     )
#     # Dynamically name the correlation key
#     column_info_list[corr_key] <- as.numeric(col_corr)
#     # Append the collected data to the info_list
#     info_list[[col_name]] <- column_info_list
#   }
#   # Convert the list to a data.table for a nice format and return
#   info_dt <- rbindlist(info_list, idcol = "ColumnName")
#   return(info_dt)
# }
dhs_data_column_info <- column_info(dhs_data, "ib_agi")
View(dhs_data_column_info)
# Load the ggplot2 package
library(ggplot2)
# Creating a data frame for the utility curve
values <- data.frame(x = seq(-10, 10, by = 0.05))
values$y <- ifelse(values$x < 0, -(-values$x)^0.88, values$x^0.88)
# Plotting the graph
ggplot(values, aes(x, y)) +
geom_line(color = "blue") +
geom_point(aes(0, 0), color = "red") +
geom_vline(xintercept = 0, linetype = "dashed", color = "red") +
annotate("text", x = 0, y = 1, label = "Reference Point (Compliance)", vjust = -1, hjust = 0.5) +
labs(title = "Utility in Prospect Theory", x = "Gains and Losses", y = "Utility") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Load the ggplot2 package
library(ggplot2)
# Creating a more pronounced data frame for the utility curve
values <- data.frame(x = seq(-10, 10, by = 0.05))
values$y <- ifelse(values$x < 0, -(-values$x)^0.5, values$x^0.5)
# Plotting the adjusted graph
ggplot(values, aes(x, y)) +
geom_line(color = "blue") +
geom_point(aes(0, 0), color = "red") +
geom_vline(xintercept = 0, linetype = "dashed", color = "red") +
annotate("text", x = 0, y = 1, label = "Reference Point (Compliance)", vjust = -1, hjust = 0.5) +
labs(title = "Adjusted Utility in Prospect Theory", x = "Gains and Losses", y = "Utility") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Load the ggplot2 package
library(ggplot2)
# Adjusting the data frame for a more accurate Prospect Theory curve
# This time, we'll make the curve for losses steeper than for gains.
values <- data.frame(x = seq(-10, 10, by = 0.05))
# Assuming a more pronounced effect for losses
values$y <- ifelse(values$x < 0, -(-values$x)^0.88, values$x^0.5)
# Plotting the corrected graph
ggplot(values, aes(x, y)) +
geom_line(color = "blue") +
geom_point(aes(0, 0), color = "red") +
geom_vline(xintercept = 0, linetype = "dashed", color = "red") +
annotate("text", x = 0, y = 1, label = "Reference Point (Compliance)", vjust = -1, hjust = 0.5) +
labs(title = "Corrected Utility in Prospect Theory", x = "Gains and Losses", y = "Utility") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Load the ggplot2 package
library(ggplot2)
# Parameters from the image (adjust these if needed)
lambda <- 2.25  # Loss aversion coefficient
alpha <- 0.88   # Curvature for gains
beta <- 0.88    # Curvature for losses
# Prospect Theory Value Function
prospect_value <- function(x) {
ifelse(x >= 0,
x^alpha,  # Gains part of the function
-lambda * (-x)^beta)  # Losses part of the function
}
# Create a sequence of gains and losses
x_values <- seq(-10, 10, by = 0.1)
y_values <- sapply(x_values, prospect_value)
# Creating a data frame for ggplot
data_frame <- data.frame(Dollar_Amount = x_values, 'Subjective Utility Value' = y_values)
# Plotting the graph
ggplot(data_frame, aes(x = Dollar_Amount, y = `Subjective Utility Value`)) +
geom_line() +
geom_vline(xintercept = 0, linetype = "dashed", color = "blue") +
annotate("text", x = 0, y = 0, label = "Compliance", vjust = 2, hjust = 0.5) +
labs(title = "Value Function in Prospect Theory",
x = "Dollar Amount",
y = "Subjective Utility Value") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Load the ggplot2 package
library(ggplot2)
# Parameters from the image (adjust these if needed)
lambda <- 2.25  # Loss aversion coefficient
alpha <- 0.88   # Curvature for gains
beta <- 0.88    # Curvature for losses
# Prospect Theory Value Function
prospect_value <- function(x) {
ifelse(x >= 0,
x^alpha,  # Gains part of the function
-lambda * (-x)^beta)  # Losses part of the function
}
# Create a sequence of gains and losses
x_values <- seq(-10, 10, by = 0.1)
y_values <- sapply(x_values, prospect_value)
# Creating a data frame for ggplot
data_frame <- data.frame(Dollar_Amount = x_values, Subjective_Utility_Value = y_values)
# Plotting the graph
ggplot(data_frame, aes(x = Dollar_Amount, y = Subjective_Utility_Value)) +
geom_line() +
geom_vline(xintercept = 0, linetype = "dashed", color = "blue") +
annotate("text", x = 0, y = min(y_values), label = "Compliance", vjust = -1, hjust = 0.5) +
labs(title = "Value Function in Prospect Theory",
x = "Dollar Amount",
y = "Subjective Utility Value") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Display the plot
g
# Load the ggplot2 package
library(ggplot2)
# Parameters from the image (adjust these if needed)
lambda <- 2.25  # Loss aversion coefficient
alpha <- 0.88   # Curvature for gains
beta <- 0.88    # Curvature for losses
# Prospect Theory Value Function
prospect_value <- function(x) {
ifelse(x >= 0,
x^alpha,  # Gains part of the function
-lambda * (-x)^beta)  # Losses part of the function
}
# Create a sequence of gains and losses
x_values <- seq(-10, 10, by = 0.1)
y_values <- sapply(x_values, prospect_value)
# Creating a data frame for ggplot
data_frame <- data.frame(Dollar_Amount = x_values, Subjective_Utility_Value = y_values)
# Plotting the graph
ggplot(data_frame, aes(x = Dollar_Amount, y = Subjective_Utility_Value)) +
geom_line() +
geom_vline(xintercept = 0, linetype = "dashed", color = "blue") +
annotate("text", x = 0, y = min(y_values), label = "Compliance", vjust = -1, hjust = 0.5) +
labs(title = "Value Function in Prospect Theory",
x = "Dollar Amount",
y = "Subjective Utility Value") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Display the plot
g
library(ggplot2)
# Parameters from the image (adjust these if needed)
lambda <- 2.25  # Loss aversion coefficient
alpha <- 0.88   # Curvature for gains
beta <- 0.88    # Curvature for losses
# Prospect Theory Value Function
prospect_value <- function(x) {
ifelse(x >= 0,
x^alpha,  # Gains part of the function
-lambda * (-x)^beta)  # Losses part of the function
}
# Create a sequence of gains and losses
x_values <- seq(-10, 10, by = 0.1)
y_values <- sapply(x_values, prospect_value)
# Creating a data frame for ggplot
data_frame <- data.frame(Dollar_Amount = x_values, Subjective_Utility_Value = y_values)
# Plotting the graph
ggplot(data_frame, aes(x = Dollar_Amount, y = Subjective_Utility_Value)) +
geom_line() +
geom_vline(xintercept = 0, linetype = "dashed", color = "blue") +
annotate("text", x = 0, y = min(y_values), label = "Compliance", vjust = -1, hjust = 0.5) +
labs(title = "Value Function in Prospect Theory",
x = "Dollar Amount",
y = "Subjective Utility Value") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
library(ggplot2)
# Parameters from the image (adjust these if needed)
lambda <- 2.25  # Loss aversion coefficient
alpha <- 0.88   # Curvature for gains
beta <- 0.88    # Curvature for losses
# Prospect Theory Value Function
prospect_value <- function(x) {
ifelse(x >= 0,
x^alpha,  # Gains part of the function
-lambda * (-x)^beta)  # Losses part of the function
}
# Create a sequence of gains and losses
x_values <- seq(-10, 10, by = 0.1)
y_values <- sapply(x_values, prospect_value)
# Creating a data frame for ggplot
data_frame <- data.frame(Dollar_Amount = x_values, Subjective_Utility_Value = y_values)
# Plotting the graph
ggplot(data_frame, aes(x = Dollar_Amount, y = Subjective_Utility_Value)) +
geom_line() +
geom_vline(xintercept = 0, linetype = "dashed", color = "blue") +
annotate("text", x = 0, y = min(y_values), label = "Compliance", vjust = -1, hjust = 0.5) +
labs(title = "Value Function in Prospect Theory",
x = "Dollar Amount",
y = "Subjective Utility Value") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Load necessary library
library(ggplot2)
# Parameters from Tversky and Kahneman (1992)
rho <- 0.88
lambda <- 2.25
# Value function definition
value_function <- function(vals) {
ifelse(vals >= 0, vals^rho, -lambda * ((-vals)^rho))
}
# Generate a sequence of values (including both gains and losses)
vals <- seq(-10, 10, by = 0.1)
# Calculate the results based on the value function
results <- sapply(vals, value_function)
# Create the plot
ggplot(data = data.frame(vals, results), aes(x = vals, y = results)) +
geom_line() +
theme_minimal() +
ggtitle("Prospect Theory Value Function") +
xlab("Values") +
ylab("Utility") +
geom_hline(yintercept = 0, linetype="dashed", color = "grey") +
geom_vline(xintercept = 0, linetype="dashed", color = "grey")
# This R script assumes the interpretation of the parameters as described.
# Adjustments might be necessary depending on specific requirements or interpretations of the parameters.
# Load necessary library
library(ggplot2)
# Parameters from Tversky and Kahneman (1992)
rho <- 0.88
lambda <- 2.25
# Value function definition
value_function <- function(vals) {
ifelse(vals >= 0, vals^rho, -lambda * ((-vals)^rho))
}
# Generate a sequence of values (including both gains and losses)
vals <- seq(-10, 10, by = 0.1)
# Calculate the results based on the value function
results <- sapply(vals, value_function)
# Create the plot
ggplot(data = data.frame(vals, results), aes(x = vals, y = results)) +
geom_line() +
theme_minimal() +
ggtitle("Prospect Theory Value Function") +
xlab("Values") +
ylab("Utility") +
geom_hline(yintercept = 0, linetype="dashed", color = "grey") +
geom_vline(xintercept = 0, linetype="dashed", color = "grey") +
annotate("text", x = 0, y = 0, label = " Reference Point\n(Compliant Situation)", vjust = -1, hjust = 1)
# This script now includes an annotation for the reference point as the compliant situation.
# It clearly marks the origin where both values and utility are zero, emphasizing its significance in prospect theory.
# Load necessary library
library(ggplot2)
# Parameters from Tversky and Kahneman (1992)
rho <- 0.88
lambda <- 2.25
# Value function definition
value_function <- function(vals) {
ifelse(vals >= 0, vals^rho, -lambda * ((-vals)^rho))
}
# Generate a sequence of values (including both gains and losses)
vals <- seq(-10, 10, by = 0.1)
# Calculate the results based on the value function
results <- sapply(vals, value_function)
# Create the plot
ggplot(data = data.frame(vals, results), aes(x = vals, y = results)) +
geom_line() +
theme_minimal() +
ggtitle("Prospect Theory Value Function") +
xlab("Values") +
ylab("Utility") +
geom_hline(yintercept = 0, linetype="dashed", color = "grey") +
geom_vline(xintercept = 0, linetype="dashed", color = "grey") +
annotate("text", x = 0, y = 0, label = " Reference Point\n(Compliant Situation)", vjust = -1, hjust = 1)
# This script now includes an annotation for the reference point as the compliant situation.
# It clearly marks the origin where both values and utility are zero, emphasizing its significance in prospect theory.
# Load necessary library
library(ggplot2)
# Parameters from Tversky and Kahneman (1992)
rho <- 0.88
lambda <- 2.25
# Value function definition
value_function <- function(vals) {
ifelse(vals >= 0, vals^rho, -lambda * ((-vals)^rho))
}
# Generate a sequence of values (including both gains and losses)
vals <- seq(-10, 10, by = 0.1)
# Calculate the results based on the value function
results <- sapply(vals, value_function)
# Create the plot
ggplot(data = data.frame(vals, results), aes(x = vals, y = results)) +
geom_line() +
theme_minimal() +
ggtitle("Prospect Theory Value Function") +
xlab("Values") +
ylab("Utility") +
geom_hline(yintercept = 0, linetype="dashed", color = "grey") +
geom_vline(xintercept = 0, linetype="dashed", color = "grey") +
annotate("text", x = 0, y = 0, label = " Reference Point\n(Compliant Situation)", vjust = -1, hjust = 1)
# This script now includes an annotation for the reference point as the compliant situation.
# It clearly marks the origin where both values and utility are zero, emphasizing its significance in prospect theory.
View(values)
devtools::document()
devtools::install(".")
devtools::document()
devtools::install(".")
devtools::document()
